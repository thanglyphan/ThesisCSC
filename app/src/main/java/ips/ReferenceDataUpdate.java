package ips;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 29/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class ReferenceDataUpdate extends AttributeContainer implements KvmSerializable,java.io.Serializable
{

    
	/**
	* Name
	*                This element is mandatory for Create Reference Data
	*/
    public String name;
    
	/**
	* External Code
	*/
    public String externalCode;
    
	/**
	* Parent Dependencies tab
	*/
    public ReferenceDataDependencyList parentDependencyList;
    
	/**
	* Child Dependencies tab
	*/
    public ReferenceDataDependencyList childDependencyList;
    
	/**
	* Default Value
	*/
    public Boolean isDefault;
    
	/**
	* Language Table
	*/
    public ReferenceDataNameList nameList;
    
	/**
	* Notes tab
	*/
    public String note;
    
	/**
	* Active
	*/
    public Boolean isActive;

    public ReferenceDataUpdate ()
    {
    }

    public ReferenceDataUpdate (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("name"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.name = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.name = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("externalCode"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.externalCode = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.externalCode = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("parentDependencyList"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.parentDependencyList = (ReferenceDataDependencyList)__envelope.get(j,ReferenceDataDependencyList.class,false);
                    }
                    continue;
                }
                if (info.name.equals("childDependencyList"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.childDependencyList = (ReferenceDataDependencyList)__envelope.get(j,ReferenceDataDependencyList.class,false);
                    }
                    continue;
                }
                if (info.name.equals("isDefault"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isDefault = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isDefault = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("nameList"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.nameList = new ReferenceDataNameList(j,__envelope);
                    }
                    continue;
                }
                if (info.name.equals("note"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.note = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.note = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("isActive"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isActive = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isActive = (Boolean)obj;
                        }
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return this.name!=null?this.name:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==1)
        {
            return this.externalCode!=null?this.externalCode:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==2)
        {
            return this.parentDependencyList!=null?this.parentDependencyList:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==3)
        {
            return this.childDependencyList!=null?this.childDependencyList:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==4)
        {
            return this.isDefault!=null?this.isDefault:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==5)
        {
            return this.nameList!=null?this.nameList:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==6)
        {
            return this.note!=null?this.note:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==7)
        {
            return this.isActive!=null?this.isActive:SoapPrimitive.NullSkip;
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 8;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        if(propertyIndex==0)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "name";
            info.namespace= "";
        }
        if(propertyIndex==1)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "externalCode";
            info.namespace= "";
        }
        if(propertyIndex==2)
        {
            info.type = ReferenceDataDependencyList.class;
            info.name = "parentDependencyList";
            info.namespace= "";
        }
        if(propertyIndex==3)
        {
            info.type = ReferenceDataDependencyList.class;
            info.name = "childDependencyList";
            info.namespace= "";
        }
        if(propertyIndex==4)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isDefault";
            info.namespace= "";
        }
        if(propertyIndex==5)
        {
            info.type = PropertyInfo.VECTOR_CLASS;
            info.name = "nameList";
            info.namespace= "";
        }
        if(propertyIndex==6)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "note";
            info.namespace= "";
        }
        if(propertyIndex==7)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isActive";
            info.namespace= "";
        }
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

