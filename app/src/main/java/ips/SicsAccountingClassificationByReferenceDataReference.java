package ips;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 29/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

public class SicsAccountingClassificationByReferenceDataReference extends SicsAbstractAccountingClassificationReference implements KvmSerializable,java.io.Serializable
{

    
	/**
	* The "RU 1" column in the Accounting Classification list-screen in SICS/nt.
	*                           Also called "Reporting Unit 1 (Profit Center)" in the create/edit screen in SICS/nt
	*/
    public SicsReportingUnitReference reportingUnit1;
    
	/**
	* The "RU 2" column in the Accounting Classification list-screen in SICS/nt.
	*                           Also called "Reporting Unit 2 (Segment Code)" in the create/edit screen in SICS/nt
	*/
    public SicsReportingUnitReference reportingUnit2;
    
	/**
	* The "RU 3" column in the Accounting Classification list-screen in SICS/nt.
	*                           Also called "Reporting Unit 3 (Person)" in the create/edit screen in SICS/nt
	*/
    public SicsReportingUnitReference reportingUnit3;
    
    public ArrayList< SicsReferenceDataReference> includedRefData =new ArrayList<SicsReferenceDataReference >();
    
	/**
	* SubclassNumber: 22.
	*/
    public ArrayList< SicsReferenceDataReference> includedMethodRefData =new ArrayList<SicsReferenceDataReference >();
    
    public ArrayList< SicsAreaGroupCountryReference> includedCountryGroups =new ArrayList<SicsAreaGroupCountryReference >();
    
    public ArrayList< SicsAreaGroupStateReference> includedStateGroups =new ArrayList<SicsAreaGroupStateReference >();
    
    public ArrayList< SicsCountryReference> includedCountries =new ArrayList<SicsCountryReference >();
    
    public ArrayList< SicsStateReference> includedStates =new ArrayList<SicsStateReference >();

    public SicsAccountingClassificationByReferenceDataReference ()
    {
    }

    public SicsAccountingClassificationByReferenceDataReference (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("reportingUnit1"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.reportingUnit1 = (SicsReportingUnitReference)__envelope.get(j,SicsReportingUnitReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("reportingUnit2"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.reportingUnit2 = (SicsReportingUnitReference)__envelope.get(j,SicsReportingUnitReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("reportingUnit3"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.reportingUnit3 = (SicsReportingUnitReference)__envelope.get(j,SicsReportingUnitReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("includedRefData"))
                {
                    if(obj!=null)
                    {
        
                    
                        if(this.includedRefData==null)
                        {
                            this.includedRefData = new ArrayList< SicsReferenceDataReference>();
                        }
                        java.lang.Object j =obj;
                        SicsReferenceDataReference j1= (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                        this.includedRefData.add(j1);
                   
        
                    }
                    continue;
                }
                if (info.name.equals("includedMethodRefData"))
                {
                    if(obj!=null)
                    {
        
                    
                        if(this.includedMethodRefData==null)
                        {
                            this.includedMethodRefData = new ArrayList< SicsReferenceDataReference>();
                        }
                        java.lang.Object j =obj;
                        SicsReferenceDataReference j1= (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                        this.includedMethodRefData.add(j1);
                   
        
                    }
                    continue;
                }
                if (info.name.equals("includedCountryGroups"))
                {
                    if(obj!=null)
                    {
        
                    
                        if(this.includedCountryGroups==null)
                        {
                            this.includedCountryGroups = new ArrayList< SicsAreaGroupCountryReference>();
                        }
                        java.lang.Object j =obj;
                        SicsAreaGroupCountryReference j1= (SicsAreaGroupCountryReference)__envelope.get(j,SicsAreaGroupCountryReference.class,false);
                        this.includedCountryGroups.add(j1);
                   
        
                    }
                    continue;
                }
                if (info.name.equals("includedStateGroups"))
                {
                    if(obj!=null)
                    {
        
                    
                        if(this.includedStateGroups==null)
                        {
                            this.includedStateGroups = new ArrayList< SicsAreaGroupStateReference>();
                        }
                        java.lang.Object j =obj;
                        SicsAreaGroupStateReference j1= (SicsAreaGroupStateReference)__envelope.get(j,SicsAreaGroupStateReference.class,false);
                        this.includedStateGroups.add(j1);
                   
        
                    }
                    continue;
                }
                if (info.name.equals("includedCountries"))
                {
                    if(obj!=null)
                    {
        
                    
                        if(this.includedCountries==null)
                        {
                            this.includedCountries = new ArrayList< SicsCountryReference>();
                        }
                        java.lang.Object j =obj;
                        SicsCountryReference j1= (SicsCountryReference)__envelope.get(j,SicsCountryReference.class,false);
                        this.includedCountries.add(j1);
                   
        
                    }
                    continue;
                }
                if (info.name.equals("includedStates"))
                {
                    if(obj!=null)
                    {
        
                    
                        if(this.includedStates==null)
                        {
                            this.includedStates = new ArrayList< SicsStateReference>();
                        }
                        java.lang.Object j =obj;
                        SicsStateReference j1= (SicsStateReference)__envelope.get(j,SicsStateReference.class,false);
                        this.includedStates.add(j1);
                   
        
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.reportingUnit1!=null?this.reportingUnit1:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.reportingUnit2!=null?this.reportingUnit2:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return this.reportingUnit3!=null?this.reportingUnit3:SoapPrimitive.NullSkip;
        }
        if(propertyIndex>=count+3 && propertyIndex < count+3+this.includedRefData.size())
        {
            return this.includedRefData.get(propertyIndex-(count+3));
        }
        if(propertyIndex>=count+3+this.includedRefData.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size())
        {
            return this.includedMethodRefData.get(propertyIndex-(count+3+this.includedRefData.size()));
        }
        if(propertyIndex>=count+3+this.includedRefData.size()+this.includedMethodRefData.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size())
        {
            return this.includedCountryGroups.get(propertyIndex-(count+3+this.includedRefData.size()+this.includedMethodRefData.size()));
        }
        if(propertyIndex>=count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size())
        {
            return this.includedStateGroups.get(propertyIndex-(count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()));
        }
        if(propertyIndex>=count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size()+this.includedCountries.size())
        {
            return this.includedCountries.get(propertyIndex-(count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size()));
        }
        if(propertyIndex>=count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size()+this.includedCountries.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size()+this.includedCountries.size()+this.includedStates.size())
        {
            return this.includedStates.get(propertyIndex-(count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size()+this.includedCountries.size()));
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+3+includedRefData.size()+includedMethodRefData.size()+includedCountryGroups.size()+includedStateGroups.size()+includedCountries.size()+includedStates.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = SicsReportingUnitReference.class;
            info.name = "reportingUnit1";
            info.namespace= "";
        }
        if(propertyIndex==count+1)
        {
            info.type = SicsReportingUnitReference.class;
            info.name = "reportingUnit2";
            info.namespace= "";
        }
        if(propertyIndex==count+2)
        {
            info.type = SicsReportingUnitReference.class;
            info.name = "reportingUnit3";
            info.namespace= "";
        }
        if(propertyIndex>=count+3 && propertyIndex < count+3+this.includedRefData.size())
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "includedRefData";
            info.namespace= "";
        }
        if(propertyIndex>=count+3+this.includedRefData.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size())
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "includedMethodRefData";
            info.namespace= "";
        }
        if(propertyIndex>=count+3+this.includedRefData.size()+this.includedMethodRefData.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size())
        {
            info.type = SicsAreaGroupCountryReference.class;
            info.name = "includedCountryGroups";
            info.namespace= "";
        }
        if(propertyIndex>=count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size())
        {
            info.type = SicsAreaGroupStateReference.class;
            info.name = "includedStateGroups";
            info.namespace= "";
        }
        if(propertyIndex>=count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size()+this.includedCountries.size())
        {
            info.type = SicsCountryReference.class;
            info.name = "includedCountries";
            info.namespace= "";
        }
        if(propertyIndex>=count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size()+this.includedCountries.size() && propertyIndex < count+3+this.includedRefData.size()+this.includedMethodRefData.size()+this.includedCountryGroups.size()+this.includedStateGroups.size()+this.includedCountries.size()+this.includedStates.size())
        {
            info.type = SicsStateReference.class;
            info.name = "includedStates";
            info.namespace= "";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

