package SicsWsPcAccountingEntryPoint;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 30/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.math.BigDecimal;

public class IndexClauseCondition extends DomainObject implements KvmSerializable,java.io.Serializable
{

    
	/**
	* SicsRefIndexApplicationRestriction refdata subclass 563
	*/
    public SicsReferenceDataReference applicationRestriction;
    
    public BigDecimal baseIndex;
    
	/**
	* NB! Should only be used for DomainRetrieval. The baseIndexDate is set using countryIndexRowReference.
	*/
    public java.util.Date baseIndexDate;
    
	/**
	* SicsRefIndexCalculationInitiation refdata subclass 157
	*/
    public SicsReferenceDataReference calculationInitiated;
    
	/**
	* SicsRefIndexCalculationMethod refdata subclass 156
	*/
    public SicsReferenceDataReference calculationMethod;
    
	/**
	* SicsRefIndexClaimsAffectedByIndexation refdata subclass 564
	*/
    public SicsReferenceDataReference claimsAffected;
    
    public BigDecimal contractBaseIndex=BigDecimal.ZERO;
    
	/**
	* SicsRefIndexContractBaseIndexDate refdata subclass 566
	*/
    public SicsReferenceDataReference contractBaseIndexDate;
    
	/**
	* Note: The allowed set of values ranges from 1 to 12 (inclusive of both values).
	*/
    public Integer contractBaseIndexMQ;
    
    public Integer contractBaseIndexYear;
    
	/**
	* NB! Should only be used for DomainRetrieval. The country is set using countryIndexRowReference.
	*/
    public SicsCountryReference country;
    
	/**
	* SicsRefIndexCover refdata subclass 39
	*/
    public SicsReferenceDataReference coverLimits;
    
	/**
	* SicsRefIndexDeviation refdata subclass 565
	*/
    public SicsReferenceDataReference indexDeviation;
    
    public String indexNumberName;
    
	/**
	* NB! Should only be used for DomainRetrieval. The indexType is set using countryIndexRowReference.
	*/
    public SicsReferenceDataReference indexType;
    
    public String note;
    
	/**
	* SicsRefIndexClaim refdata subclass 38
	*/
    public SicsReferenceDataReference paymentReserves;
    
	/**
	* SicsRefReserveIndexationMethod refdata subclass 1205
	*/
    public SicsReferenceDataReference reservesIndexMethod;
    
    public BigDecimal percentage;

    public IndexClauseCondition ()
    {
    }

    public IndexClauseCondition (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("applicationRestriction"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.applicationRestriction = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("baseIndex"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.baseIndex = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.baseIndex = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("baseIndexDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.baseIndexDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.baseIndexDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("calculationInitiated"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.calculationInitiated = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("calculationMethod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.calculationMethod = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("claimsAffected"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.claimsAffected = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("contractBaseIndex"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.contractBaseIndex = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.contractBaseIndex = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("contractBaseIndexDate"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.contractBaseIndexDate = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("contractBaseIndexMQ"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.contractBaseIndexMQ = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.contractBaseIndexMQ = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("contractBaseIndexYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.contractBaseIndexYear = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.contractBaseIndexYear = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("country"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.country = (SicsCountryReference)__envelope.get(j,SicsCountryReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("coverLimits"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.coverLimits = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("indexDeviation"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.indexDeviation = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("indexNumberName"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.indexNumberName = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.indexNumberName = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("indexType"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.indexType = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("note"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.note = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.note = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("paymentReserves"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.paymentReserves = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("reservesIndexMethod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.reservesIndexMethod = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("percentage"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.percentage = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.percentage = (BigDecimal)obj;
                        }
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return applicationRestriction;
        }
        if(propertyIndex==count+1)
        {
            return this.baseIndex!=null?this.baseIndex.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return this.baseIndexDate!=null?Helper.getDateFormat().format(this.baseIndexDate):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+3)
        {
            return calculationInitiated;
        }
        if(propertyIndex==count+4)
        {
            return calculationMethod;
        }
        if(propertyIndex==count+5)
        {
            return this.claimsAffected!=null?this.claimsAffected:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return this.contractBaseIndex!=null?this.contractBaseIndex.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+7)
        {
            return contractBaseIndexDate;
        }
        if(propertyIndex==count+8)
        {
            return this.contractBaseIndexMQ!=null?this.contractBaseIndexMQ:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+9)
        {
            return this.contractBaseIndexYear!=null?this.contractBaseIndexYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+10)
        {
            return this.country!=null?this.country:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+11)
        {
            return coverLimits;
        }
        if(propertyIndex==count+12)
        {
            return this.indexDeviation!=null?this.indexDeviation:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+13)
        {
            return this.indexNumberName!=null?this.indexNumberName:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+14)
        {
            return this.indexType!=null?this.indexType:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+15)
        {
            return this.note!=null?this.note:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+16)
        {
            return this.paymentReserves!=null?this.paymentReserves:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+17)
        {
            return this.reservesIndexMethod!=null?this.reservesIndexMethod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+18)
        {
            return this.percentage!=null?this.percentage.toString():SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+19;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "applicationRestriction";
            info.namespace= "";
        }
        if(propertyIndex==count+1)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "baseIndex";
            info.namespace= "";
        }
        if(propertyIndex==count+2)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "baseIndexDate";
            info.namespace= "";
        }
        if(propertyIndex==count+3)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "calculationInitiated";
            info.namespace= "";
        }
        if(propertyIndex==count+4)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "calculationMethod";
            info.namespace= "";
        }
        if(propertyIndex==count+5)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "claimsAffected";
            info.namespace= "";
        }
        if(propertyIndex==count+6)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "contractBaseIndex";
            info.namespace= "";
        }
        if(propertyIndex==count+7)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "contractBaseIndexDate";
            info.namespace= "";
        }
        if(propertyIndex==count+8)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "contractBaseIndexMQ";
            info.namespace= "";
        }
        if(propertyIndex==count+9)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "contractBaseIndexYear";
            info.namespace= "";
        }
        if(propertyIndex==count+10)
        {
            info.type = SicsCountryReference.class;
            info.name = "country";
            info.namespace= "";
        }
        if(propertyIndex==count+11)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "coverLimits";
            info.namespace= "";
        }
        if(propertyIndex==count+12)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "indexDeviation";
            info.namespace= "";
        }
        if(propertyIndex==count+13)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "indexNumberName";
            info.namespace= "";
        }
        if(propertyIndex==count+14)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "indexType";
            info.namespace= "";
        }
        if(propertyIndex==count+15)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "note";
            info.namespace= "";
        }
        if(propertyIndex==count+16)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "paymentReserves";
            info.namespace= "";
        }
        if(propertyIndex==count+17)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "reservesIndexMethod";
            info.namespace= "";
        }
        if(propertyIndex==count+18)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "percentage";
            info.namespace= "";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

