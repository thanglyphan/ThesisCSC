package SicsWsTaskManagementEntryPoint;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 30/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class Measurement extends DomainObject implements KvmSerializable,java.io.Serializable
{

    
	/**
	* Used by the "update" Condition Web Service: set to "true" if this component of the condition should be removed.
	*/
    public Boolean isToBeDeleted;
    
	/**
	* SubclassNumber: 1001.   CODE: ITEMS |  MAX_WPER | NO_LOCTNS | PAYROLL_NUMBER | REV_DIST | RP_DIST | WEIGHT_FACTOR.  refOptionalField serves as the id in combination with refConditionPer.
	*                      Time Measurement
	*/
    public SicsReferenceDataReference refOptionalField;
    
	/**
	* XXXXXX
	*                      Count
	*/
    public Integer count;
    
	/**
	* SubclassNumber: 1003. SicsRefMeasurementUnit
	*                      CODE: PCT |  DAYS_YEAR | EMP | ITEMS | KM | MAN | MILES | PER | UNITS.  For Time: SUBCLASS: 69, CODE: D |  H | M | Y.
	*                      Unit
	*/
    public SicsReferenceDataReference unit;
    
	/**
	* XXXXXX
	*                      Is Sum
	*/
    public Boolean isSum;
    
	/**
	* XXXXXX
	*                      Sum Up
	*/
    public Boolean isAdded;

    public Measurement ()
    {
    }

    public Measurement (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("isToBeDeleted"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isToBeDeleted = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isToBeDeleted = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("refOptionalField"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.refOptionalField = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("count"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.count = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.count = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("unit"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.unit = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("isSum"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isSum = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isSum = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("isAdded"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isAdded = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isAdded = (Boolean)obj;
                        }
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.isToBeDeleted!=null?this.isToBeDeleted:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return refOptionalField;
        }
        if(propertyIndex==count+2)
        {
            return this.count!=null?this.count:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+3)
        {
            return this.unit!=null?this.unit:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+4)
        {
            return this.isSum!=null?this.isSum:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+5)
        {
            return this.isAdded!=null?this.isAdded:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+6;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isToBeDeleted";
            info.namespace= "";
        }
        if(propertyIndex==count+1)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "refOptionalField";
            info.namespace= "";
        }
        if(propertyIndex==count+2)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "count";
            info.namespace= "";
        }
        if(propertyIndex==count+3)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "unit";
            info.namespace= "";
        }
        if(propertyIndex==count+4)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isSum";
            info.namespace= "";
        }
        if(propertyIndex==count+5)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isAdded";
            info.namespace= "";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

