package SicsWsTaskManagementEntryPoint;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 30/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.math.BigDecimal;

public class AccountingDetailBalanceEntry extends DomainObject implements KvmSerializable,java.io.Serializable
{

    
	/**
	* Entry Code column
	*/
    public SicsAccountingEntryCodeReference entryCode;
    
    public ReverseEstimateList reverseEstimateList;
    
    public ReleaseBookingList releaseBookingList;
    
	/**
	* SubclassNumber: 165. SicsRefAccountingEntryCategory.
	*/
    public SicsReferenceDataReference releaseBookingOption;
    
	/**
	* CL Process ID
	*/
    public String processId;
    
	/**
	* TA Process ID
	*/
    public String documentId;
    
    public SicsCurrencyReference functionalCurrency1;
    
    public SicsCurrencyReference functionalCurrency2;
    
    public BigDecimal functionalCurrency1Amount;
    
    public BigDecimal functionalCurrency2Amount;
    
	/**
	* Business+InsuredPeriod column,Section column and Accounting Classification column, 
	*                             If you want to create Accounting Classification while creating worksheet if it does not exist, use accountingClassificationByReferenceData element
	*/
    public SicsAbstractAccountingClassificationReference accountingClassification;
    
	/**
	* To be used if you want to create Accounting Classification if it does not exist.
	*                          Mandatory to provide scopeOfCover along with this element
	*/
    public AccountingClassificationByReferenceData accountingClassificationByReferenceData;
    
	/**
	* Business+InsuredPeriod column,Section column
	*                          identifes business, insuredPeriod, scopeOfCover.
	*/
    public SicsScopeOfCoverReference scopeOfCover;
    
	/**
	* Booking Year/Period column
	*/
    public SicsBookingYearPeriodReference bookingYearPeriod;
    
	/**
	* Legal Booking Year/Period column
	*/
    public SicsBookingYearPeriodReference bookingYearPeriod2;
    
	/**
	* Global Booking Year/Period column
	*/
    public SicsBookingYearPeriodReference bookingYearPeriod3;
    
	/**
	* Original Booking Year column
	*/
    public Integer originalBookingYear;
    
	/**
	* SubclassNumber: 10. SicsRefPeriod.
	*                     Original Booking Period column
	*/
    public SicsReferenceDataReference originalBookingPeriod;
    
	/**
	* Mandatory for Reverse Estimate and Release Booking
	*                       AccYr column
	*/
    public Integer accountingYear;
    
	/**
	* Mandatory for Reverse Estimate and Release Booking
	*                       AccPeriod column
	*                       SubclassNumber: 177. SicsRefAccountingPeriod.
	*/
    public SicsReferenceDataReference accountingRefPeriod;
    
	/**
	* Description of Account
	*                          SubclassNumber: 185. SicsRefAccountingPeriodClassification.
	*/
    public SicsReferenceDataReference descriptionOfAccount;
    
	/**
	* Original UwYR column
	*/
    public Integer originalUnderwritingYear;
    
	/**
	* OccYR column
	*/
    public Integer occurrenceYear;
    
	/**
	* Accounting Period From - To  column
	*/
    public SicsWsDatespanReference accountingPeriod;
    
	/**
	* Due Date column
	*/
    public java.util.Date dueDate;
    
	/**
	* Amount column
	*/
    public BigDecimal adjustmentAmount;
    
	/**
	* New Amount column
	*/
    public BigDecimal newAmount;
    
	/**
	* Notes column
	*/
    public String comment;
    
	/**
	* Start Date column
	*                          startDate is for Life and Health.
	*/
    public java.util.Date startDate;
    
	/**
	* End Date column
	*                          endDate is for Life and Health.
	*/
    public java.util.Date endDate;
    
	/**
	* Disability % column
	*                          disabilityPercentage is for Life and Health.
	*/
    public BigDecimal disabilityPercentage;
    
    public SicsBusinessPartnerReference linkOccBaseCompany;
    
    public SicsBusinessPartnerReference originalResponsiblePartner;
    
	/**
	* BP Payment Information
	*/
    public SicsBusinessPartnerReference businessPartner;

    public AccountingDetailBalanceEntry ()
    {
    }

    public AccountingDetailBalanceEntry (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("entryCode"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.entryCode = (SicsAccountingEntryCodeReference)__envelope.get(j,SicsAccountingEntryCodeReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("reverseEstimateList"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.reverseEstimateList = new ReverseEstimateList(j,__envelope);
                    }
                    continue;
                }
                if (info.name.equals("releaseBookingList"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.releaseBookingList = new ReleaseBookingList(j,__envelope);
                    }
                    continue;
                }
                if (info.name.equals("releaseBookingOption"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.releaseBookingOption = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("processId"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.processId = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.processId = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("documentId"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.documentId = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.documentId = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("functionalCurrency1"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.functionalCurrency1 = (SicsCurrencyReference)__envelope.get(j,SicsCurrencyReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("functionalCurrency2"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.functionalCurrency2 = (SicsCurrencyReference)__envelope.get(j,SicsCurrencyReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("functionalCurrency1Amount"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.functionalCurrency1Amount = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.functionalCurrency1Amount = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("functionalCurrency2Amount"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.functionalCurrency2Amount = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.functionalCurrency2Amount = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("accountingClassification"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.accountingClassification = (SicsAbstractAccountingClassificationReference)__envelope.get(j,SicsAbstractAccountingClassificationReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("accountingClassificationByReferenceData"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.accountingClassificationByReferenceData = (AccountingClassificationByReferenceData)__envelope.get(j,AccountingClassificationByReferenceData.class,false);
                    }
                    continue;
                }
                if (info.name.equals("scopeOfCover"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.scopeOfCover = (SicsScopeOfCoverReference)__envelope.get(j,SicsScopeOfCoverReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("bookingYearPeriod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.bookingYearPeriod = (SicsBookingYearPeriodReference)__envelope.get(j,SicsBookingYearPeriodReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("bookingYearPeriod2"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.bookingYearPeriod2 = (SicsBookingYearPeriodReference)__envelope.get(j,SicsBookingYearPeriodReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("bookingYearPeriod3"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.bookingYearPeriod3 = (SicsBookingYearPeriodReference)__envelope.get(j,SicsBookingYearPeriodReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("originalBookingYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.originalBookingYear = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.originalBookingYear = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("originalBookingPeriod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.originalBookingPeriod = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("accountingYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.accountingYear = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.accountingYear = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("accountingRefPeriod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.accountingRefPeriod = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("descriptionOfAccount"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.descriptionOfAccount = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("originalUnderwritingYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.originalUnderwritingYear = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.originalUnderwritingYear = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("occurrenceYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.occurrenceYear = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.occurrenceYear = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("accountingPeriod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.accountingPeriod = (SicsWsDatespanReference)__envelope.get(j,SicsWsDatespanReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("dueDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.dueDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.dueDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("adjustmentAmount"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.adjustmentAmount = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.adjustmentAmount = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("newAmount"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.newAmount = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.newAmount = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("comment"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.comment = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.comment = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("startDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.startDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.startDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("endDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.endDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.endDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("disabilityPercentage"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.disabilityPercentage = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.disabilityPercentage = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("linkOccBaseCompany"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.linkOccBaseCompany = (SicsBusinessPartnerReference)__envelope.get(j,SicsBusinessPartnerReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("originalResponsiblePartner"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.originalResponsiblePartner = (SicsBusinessPartnerReference)__envelope.get(j,SicsBusinessPartnerReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("businessPartner"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.businessPartner = (SicsBusinessPartnerReference)__envelope.get(j,SicsBusinessPartnerReference.class,false);
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return entryCode;
        }
        if(propertyIndex==count+1)
        {
            return this.reverseEstimateList!=null?this.reverseEstimateList:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return this.releaseBookingList!=null?this.releaseBookingList:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+3)
        {
            return this.releaseBookingOption!=null?this.releaseBookingOption:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+4)
        {
            return this.processId!=null?this.processId:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+5)
        {
            return this.documentId!=null?this.documentId:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return this.functionalCurrency1!=null?this.functionalCurrency1:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+7)
        {
            return this.functionalCurrency2!=null?this.functionalCurrency2:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+8)
        {
            return this.functionalCurrency1Amount!=null?this.functionalCurrency1Amount.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+9)
        {
            return this.functionalCurrency2Amount!=null?this.functionalCurrency2Amount.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+10)
        {
            return this.accountingClassification!=null?this.accountingClassification:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+11)
        {
            return this.accountingClassificationByReferenceData!=null?this.accountingClassificationByReferenceData:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+12)
        {
            return scopeOfCover;
        }
        if(propertyIndex==count+13)
        {
            return this.bookingYearPeriod!=null?this.bookingYearPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+14)
        {
            return this.bookingYearPeriod2!=null?this.bookingYearPeriod2:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+15)
        {
            return this.bookingYearPeriod3!=null?this.bookingYearPeriod3:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+16)
        {
            return this.originalBookingYear!=null?this.originalBookingYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+17)
        {
            return this.originalBookingPeriod!=null?this.originalBookingPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+18)
        {
            return this.accountingYear!=null?this.accountingYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+19)
        {
            return this.accountingRefPeriod!=null?this.accountingRefPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+20)
        {
            return this.descriptionOfAccount!=null?this.descriptionOfAccount:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+21)
        {
            return this.originalUnderwritingYear!=null?this.originalUnderwritingYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+22)
        {
            return this.occurrenceYear!=null?this.occurrenceYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+23)
        {
            return this.accountingPeriod!=null?this.accountingPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+24)
        {
            return this.dueDate!=null?Helper.getDateFormat().format(this.dueDate):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+25)
        {
            return this.adjustmentAmount!=null?this.adjustmentAmount.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+26)
        {
            return this.newAmount!=null?this.newAmount.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+27)
        {
            return comment;
        }
        if(propertyIndex==count+28)
        {
            return this.startDate!=null?Helper.getDateFormat().format(this.startDate):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+29)
        {
            return this.endDate!=null?Helper.getDateFormat().format(this.endDate):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+30)
        {
            return this.disabilityPercentage!=null?this.disabilityPercentage.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+31)
        {
            return this.linkOccBaseCompany!=null?this.linkOccBaseCompany:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+32)
        {
            return this.originalResponsiblePartner!=null?this.originalResponsiblePartner:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+33)
        {
            return this.businessPartner!=null?this.businessPartner:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+34;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = SicsAccountingEntryCodeReference.class;
            info.name = "entryCode";
            info.namespace= "";
        }
        if(propertyIndex==count+1)
        {
            info.type = PropertyInfo.VECTOR_CLASS;
            info.name = "reverseEstimateList";
            info.namespace= "";
        }
        if(propertyIndex==count+2)
        {
            info.type = PropertyInfo.VECTOR_CLASS;
            info.name = "releaseBookingList";
            info.namespace= "";
        }
        if(propertyIndex==count+3)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "releaseBookingOption";
            info.namespace= "";
        }
        if(propertyIndex==count+4)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "processId";
            info.namespace= "";
        }
        if(propertyIndex==count+5)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "documentId";
            info.namespace= "";
        }
        if(propertyIndex==count+6)
        {
            info.type = SicsCurrencyReference.class;
            info.name = "functionalCurrency1";
            info.namespace= "";
        }
        if(propertyIndex==count+7)
        {
            info.type = SicsCurrencyReference.class;
            info.name = "functionalCurrency2";
            info.namespace= "";
        }
        if(propertyIndex==count+8)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "functionalCurrency1Amount";
            info.namespace= "";
        }
        if(propertyIndex==count+9)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "functionalCurrency2Amount";
            info.namespace= "";
        }
        if(propertyIndex==count+10)
        {
            info.type = SicsAbstractAccountingClassificationReference.class;
            info.name = "accountingClassification";
            info.namespace= "";
        }
        if(propertyIndex==count+11)
        {
            info.type = AccountingClassificationByReferenceData.class;
            info.name = "accountingClassificationByReferenceData";
            info.namespace= "";
        }
        if(propertyIndex==count+12)
        {
            info.type = SicsScopeOfCoverReference.class;
            info.name = "scopeOfCover";
            info.namespace= "";
        }
        if(propertyIndex==count+13)
        {
            info.type = SicsBookingYearPeriodReference.class;
            info.name = "bookingYearPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+14)
        {
            info.type = SicsBookingYearPeriodReference.class;
            info.name = "bookingYearPeriod2";
            info.namespace= "";
        }
        if(propertyIndex==count+15)
        {
            info.type = SicsBookingYearPeriodReference.class;
            info.name = "bookingYearPeriod3";
            info.namespace= "";
        }
        if(propertyIndex==count+16)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "originalBookingYear";
            info.namespace= "";
        }
        if(propertyIndex==count+17)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "originalBookingPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+18)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "accountingYear";
            info.namespace= "";
        }
        if(propertyIndex==count+19)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "accountingRefPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+20)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "descriptionOfAccount";
            info.namespace= "";
        }
        if(propertyIndex==count+21)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "originalUnderwritingYear";
            info.namespace= "";
        }
        if(propertyIndex==count+22)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "occurrenceYear";
            info.namespace= "";
        }
        if(propertyIndex==count+23)
        {
            info.type = SicsWsDatespanReference.class;
            info.name = "accountingPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+24)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "dueDate";
            info.namespace= "";
        }
        if(propertyIndex==count+25)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "adjustmentAmount";
            info.namespace= "";
        }
        if(propertyIndex==count+26)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "newAmount";
            info.namespace= "";
        }
        if(propertyIndex==count+27)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "comment";
            info.namespace= "";
        }
        if(propertyIndex==count+28)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "startDate";
            info.namespace= "";
        }
        if(propertyIndex==count+29)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "endDate";
            info.namespace= "";
        }
        if(propertyIndex==count+30)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "disabilityPercentage";
            info.namespace= "";
        }
        if(propertyIndex==count+31)
        {
            info.type = SicsBusinessPartnerReference.class;
            info.name = "linkOccBaseCompany";
            info.namespace= "";
        }
        if(propertyIndex==count+32)
        {
            info.type = SicsBusinessPartnerReference.class;
            info.name = "originalResponsiblePartner";
            info.namespace= "";
        }
        if(propertyIndex==count+33)
        {
            info.type = SicsBusinessPartnerReference.class;
            info.name = "businessPartner";
            info.namespace= "";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

