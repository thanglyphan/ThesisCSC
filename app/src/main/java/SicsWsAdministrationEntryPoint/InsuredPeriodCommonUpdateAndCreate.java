package SicsWsAdministrationEntryPoint;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 29/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.math.BigDecimal;

public class InsuredPeriodCommonUpdateAndCreate extends DomainObject implements KvmSerializable,java.io.Serializable
{

    
    public java.util.Date beginDateTime;
    
    public java.util.Date endDateTime;
    
    public SicsWsDatespanReference originalPolicyInsuredPeriod;
    
    public String underwritingYear;
    
	/**
	* Not required for Renewal of Reinsurance Program
	*/
    public String note;
    
	/**
	* Not required for Renewal of Reinsurance Program
	*/
    public Boolean canBeAutoProtected;
    
	/**
	* For Inward Business only. SubclassNumber: 01073. SicsRefReasonForManualProtection
	*/
    public SicsReferenceDataReference reasonForManualProtection;
    
	/**
	* For Domain Retrieval only - Use changeRenewalOption to update element
	*/
    public SicsReferenceDataReference renewalOption;
    
    public EdiInformation ediInformation;
    
	/**
	* For OCC level of business only (update and retrieval)
	*/
    public Boolean isActive;
    
	/**
	* For Treaty type of business only (update and retrieval)
	*/
    public Boolean isSpecialAcceptanceForCession;
    
	/**
	* For OCC level of business only (update and retrieval)
	*/
    public Boolean isPlacementComplete;
    
    public Boolean isAutomaticallyRenewed;
    
    public String insuredPeriodFormerId;
    
    public String originalFormerId;
    
    public Boolean isCeaseAccounting;
    
    public String ceaseAccountingDescription;
    
    public Boolean useYearOf360Days;
    
    public Boolean useVatCalculation;
    
	/**
	* SubclassNumber: 286. SicsRefCommutationCode
	*/
    public SicsReferenceDataReference commutationCode;
    
	/**
	* Communtation Reference
	*/
    public String commutationReference;
    
    public java.util.Date commutedEffectiveDate;
    
    public java.util.Date commutedProcessedDate;
    
	/**
	* SubclassNumber: 1075. SicsRefReasonForRemoveCommutation
	*/
    public SicsReferenceDataReference reasonForRemoveCommutation;
    
	/**
	* For placements only (update and retrieval)
	*/
    public Boolean isAutomaticCalculationRequired;
    
	/**
	* For OCC level of business only (update and retrieval)
	*/
    public Boolean isInterCompanyPooling;
    
	/**
	* For Proportional OCC business only.
	*                         This element can only be used for update and domain retrieval (not for create).
	*                         Exclude Contribution to Net Quota Share OCC(s)
	*/
    public Boolean excludeContributionToNQS;
    
	/**
	* For Non-Proportional OCC business only.
	*                         Set element to nil if you want to delete link to business.
	*                         This element can only be used for update and domain retrieval (not for create).
	*                         Percentage
	*/
    public BigDecimal netPercentNQS;
    
	/**
	* For Non-Proportional OCC business only.
	*                         This element can only be used for update and domain retrieval (not for create).
	*/
    public SicsInsuredPeriodReference insuredPeriodNQS;
    
	/**
	* For OCC level of business only (update and retrieval)
	*/
    public Boolean originalAccountingYearAndPeriod;
    
	/**
	* SubclassNumber: 00280. SicsRefReinsuranceCategory
	*                      For OCC level of business only (update and retrieval)
	*/
    public SicsReferenceDataReference reinsuranceCategory;
    
	/**
	* SubclassNumber: 286. SicsRefCommutationCode.
	*                   For update and domain retrieval only
	*/
    public SicsReferenceDataReference toBeCommuted;
    
	/**
	* For update and domain retrieval only
	*/
    public Integer commutePerYear;
    
	/**
	* SubclassNumber: 177. SicsRefAccountingPeriod.
	*                   For update and domain retrieval only
	*/
    public SicsReferenceDataReference commutePerPeriod;
    
	/**
	* For update and domain retrieval only
	*/
    public Integer portfolioAdjustmentPerYear;
    
	/**
	* SubclassNumber: 177. SicsRefAccountingPeriod.
	*                   For update and domain retrieval only
	*/
    public SicsReferenceDataReference portfolioAdjustmentPerPeriod;
    
    public OccExclusionList occExclusionList;
    
	/**
	* SubclassNumber: 1124. SicsRefAttachmentMethod.
	*                      For level of business Outward Cedents Contract only.
	*/
    public SicsReferenceDataReference attachmentMethod;
    
	/**
	* For level of business Outward Cedents Contract only.
	*                      For Update and Domain Retrieval.
	*/
    public java.util.Date inForceFromDate;
    
	/**
	* SubclassNumber: 1177. SicsRefAdministrationChannel
	*/
    public SicsReferenceDataReference administrationChannel;

    public InsuredPeriodCommonUpdateAndCreate ()
    {
    }

    public InsuredPeriodCommonUpdateAndCreate (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("beginDateTime"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.beginDateTime = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.beginDateTime = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("endDateTime"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.endDateTime = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.endDateTime = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("originalPolicyInsuredPeriod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.originalPolicyInsuredPeriod = (SicsWsDatespanReference)__envelope.get(j,SicsWsDatespanReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("underwritingYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.underwritingYear = j.toString();
                            }
                        }
                        else{
                            this.underwritingYear = obj.toString();
                        }
                    }
                    continue;
                }
                if (info.name.equals("note"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.note = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.note = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("canBeAutoProtected"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.canBeAutoProtected = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.canBeAutoProtected = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("reasonForManualProtection"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.reasonForManualProtection = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("renewalOption"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.renewalOption = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("ediInformation"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.ediInformation = (EdiInformation)__envelope.get(j,EdiInformation.class,false);
                    }
                    continue;
                }
                if (info.name.equals("isActive"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isActive = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isActive = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("isSpecialAcceptanceForCession"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isSpecialAcceptanceForCession = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isSpecialAcceptanceForCession = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("isPlacementComplete"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isPlacementComplete = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isPlacementComplete = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("isAutomaticallyRenewed"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isAutomaticallyRenewed = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isAutomaticallyRenewed = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("insuredPeriodFormerId"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.insuredPeriodFormerId = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.insuredPeriodFormerId = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("originalFormerId"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.originalFormerId = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.originalFormerId = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("isCeaseAccounting"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isCeaseAccounting = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isCeaseAccounting = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("ceaseAccountingDescription"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.ceaseAccountingDescription = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.ceaseAccountingDescription = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("useYearOf360Days"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.useYearOf360Days = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.useYearOf360Days = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("useVatCalculation"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.useVatCalculation = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.useVatCalculation = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("commutationCode"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.commutationCode = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("commutationReference"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.commutationReference = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.commutationReference = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("commutedEffectiveDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.commutedEffectiveDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.commutedEffectiveDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("commutedProcessedDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.commutedProcessedDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.commutedProcessedDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("reasonForRemoveCommutation"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.reasonForRemoveCommutation = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("isAutomaticCalculationRequired"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isAutomaticCalculationRequired = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isAutomaticCalculationRequired = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("isInterCompanyPooling"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.isInterCompanyPooling = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.isInterCompanyPooling = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("excludeContributionToNQS"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.excludeContributionToNQS = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.excludeContributionToNQS = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("netPercentNQS"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.netPercentNQS = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.netPercentNQS = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("insuredPeriodNQS"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.insuredPeriodNQS = (SicsInsuredPeriodReference)__envelope.get(j,SicsInsuredPeriodReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("originalAccountingYearAndPeriod"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.originalAccountingYearAndPeriod = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.originalAccountingYearAndPeriod = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("reinsuranceCategory"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.reinsuranceCategory = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("toBeCommuted"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.toBeCommuted = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("commutePerYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.commutePerYear = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.commutePerYear = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("commutePerPeriod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.commutePerPeriod = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("portfolioAdjustmentPerYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.portfolioAdjustmentPerYear = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.portfolioAdjustmentPerYear = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("portfolioAdjustmentPerPeriod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.portfolioAdjustmentPerPeriod = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("occExclusionList"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.occExclusionList = (OccExclusionList)__envelope.get(j,OccExclusionList.class,false);
                    }
                    continue;
                }
                if (info.name.equals("attachmentMethod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.attachmentMethod = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("inForceFromDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.inForceFromDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.inForceFromDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("administrationChannel"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.administrationChannel = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.beginDateTime!=null?Helper.getDateTimeFormat().format(this.beginDateTime):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.endDateTime!=null?Helper.getDateTimeFormat().format(this.endDateTime):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return this.originalPolicyInsuredPeriod!=null?this.originalPolicyInsuredPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+3)
        {
            return this.underwritingYear!=null?this.underwritingYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+4)
        {
            return this.note!=null?this.note:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+5)
        {
            return this.canBeAutoProtected!=null?this.canBeAutoProtected:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return this.reasonForManualProtection!=null?this.reasonForManualProtection:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+7)
        {
            return this.renewalOption!=null?this.renewalOption:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+8)
        {
            return this.ediInformation!=null?this.ediInformation:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+9)
        {
            return this.isActive!=null?this.isActive:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+10)
        {
            return this.isSpecialAcceptanceForCession!=null?this.isSpecialAcceptanceForCession:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+11)
        {
            return this.isPlacementComplete!=null?this.isPlacementComplete:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+12)
        {
            return this.isAutomaticallyRenewed!=null?this.isAutomaticallyRenewed:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+13)
        {
            return this.insuredPeriodFormerId!=null?this.insuredPeriodFormerId:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+14)
        {
            return this.originalFormerId!=null?this.originalFormerId:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+15)
        {
            return this.isCeaseAccounting!=null?this.isCeaseAccounting:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+16)
        {
            return this.ceaseAccountingDescription!=null?this.ceaseAccountingDescription:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+17)
        {
            return this.useYearOf360Days!=null?this.useYearOf360Days:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+18)
        {
            return this.useVatCalculation!=null?this.useVatCalculation:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+19)
        {
            return this.commutationCode!=null?this.commutationCode:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+20)
        {
            return this.commutationReference!=null?this.commutationReference:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+21)
        {
            return this.commutedEffectiveDate!=null?Helper.getDateFormat().format(this.commutedEffectiveDate):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+22)
        {
            return this.commutedProcessedDate!=null?Helper.getDateFormat().format(this.commutedProcessedDate):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+23)
        {
            return this.reasonForRemoveCommutation!=null?this.reasonForRemoveCommutation:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+24)
        {
            return this.isAutomaticCalculationRequired!=null?this.isAutomaticCalculationRequired:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+25)
        {
            return this.isInterCompanyPooling!=null?this.isInterCompanyPooling:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+26)
        {
            return this.excludeContributionToNQS!=null?this.excludeContributionToNQS:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+27)
        {
            return this.netPercentNQS!=null?this.netPercentNQS.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+28)
        {
            return this.insuredPeriodNQS!=null?this.insuredPeriodNQS:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+29)
        {
            return this.originalAccountingYearAndPeriod!=null?this.originalAccountingYearAndPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+30)
        {
            return this.reinsuranceCategory!=null?this.reinsuranceCategory:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+31)
        {
            return this.toBeCommuted!=null?this.toBeCommuted:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+32)
        {
            return this.commutePerYear!=null?this.commutePerYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+33)
        {
            return this.commutePerPeriod!=null?this.commutePerPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+34)
        {
            return this.portfolioAdjustmentPerYear!=null?this.portfolioAdjustmentPerYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+35)
        {
            return this.portfolioAdjustmentPerPeriod!=null?this.portfolioAdjustmentPerPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+36)
        {
            return this.occExclusionList!=null?this.occExclusionList:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+37)
        {
            return this.attachmentMethod!=null?this.attachmentMethod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+38)
        {
            return this.inForceFromDate!=null?Helper.getDateFormat().format(this.inForceFromDate):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+39)
        {
            return this.administrationChannel!=null?this.administrationChannel:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+40;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "beginDateTime";
            info.namespace= "";
        }
        if(propertyIndex==count+1)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "endDateTime";
            info.namespace= "";
        }
        if(propertyIndex==count+2)
        {
            info.type = SicsWsDatespanReference.class;
            info.name = "originalPolicyInsuredPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+3)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "underwritingYear";
            info.namespace= "";
        }
        if(propertyIndex==count+4)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "note";
            info.namespace= "";
        }
        if(propertyIndex==count+5)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "canBeAutoProtected";
            info.namespace= "";
        }
        if(propertyIndex==count+6)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "reasonForManualProtection";
            info.namespace= "";
        }
        if(propertyIndex==count+7)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "renewalOption";
            info.namespace= "";
        }
        if(propertyIndex==count+8)
        {
            info.type = EdiInformation.class;
            info.name = "ediInformation";
            info.namespace= "";
        }
        if(propertyIndex==count+9)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isActive";
            info.namespace= "";
        }
        if(propertyIndex==count+10)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isSpecialAcceptanceForCession";
            info.namespace= "";
        }
        if(propertyIndex==count+11)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isPlacementComplete";
            info.namespace= "";
        }
        if(propertyIndex==count+12)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isAutomaticallyRenewed";
            info.namespace= "";
        }
        if(propertyIndex==count+13)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "insuredPeriodFormerId";
            info.namespace= "";
        }
        if(propertyIndex==count+14)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "originalFormerId";
            info.namespace= "";
        }
        if(propertyIndex==count+15)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isCeaseAccounting";
            info.namespace= "";
        }
        if(propertyIndex==count+16)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "ceaseAccountingDescription";
            info.namespace= "";
        }
        if(propertyIndex==count+17)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "useYearOf360Days";
            info.namespace= "";
        }
        if(propertyIndex==count+18)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "useVatCalculation";
            info.namespace= "";
        }
        if(propertyIndex==count+19)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "commutationCode";
            info.namespace= "";
        }
        if(propertyIndex==count+20)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "commutationReference";
            info.namespace= "";
        }
        if(propertyIndex==count+21)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "commutedEffectiveDate";
            info.namespace= "";
        }
        if(propertyIndex==count+22)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "commutedProcessedDate";
            info.namespace= "";
        }
        if(propertyIndex==count+23)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "reasonForRemoveCommutation";
            info.namespace= "";
        }
        if(propertyIndex==count+24)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isAutomaticCalculationRequired";
            info.namespace= "";
        }
        if(propertyIndex==count+25)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "isInterCompanyPooling";
            info.namespace= "";
        }
        if(propertyIndex==count+26)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "excludeContributionToNQS";
            info.namespace= "";
        }
        if(propertyIndex==count+27)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "netPercentNQS";
            info.namespace= "";
        }
        if(propertyIndex==count+28)
        {
            info.type = SicsInsuredPeriodReference.class;
            info.name = "insuredPeriodNQS";
            info.namespace= "";
        }
        if(propertyIndex==count+29)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "originalAccountingYearAndPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+30)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "reinsuranceCategory";
            info.namespace= "";
        }
        if(propertyIndex==count+31)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "toBeCommuted";
            info.namespace= "";
        }
        if(propertyIndex==count+32)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "commutePerYear";
            info.namespace= "";
        }
        if(propertyIndex==count+33)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "commutePerPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+34)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "portfolioAdjustmentPerYear";
            info.namespace= "";
        }
        if(propertyIndex==count+35)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "portfolioAdjustmentPerPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+36)
        {
            info.type = OccExclusionList.class;
            info.name = "occExclusionList";
            info.namespace= "";
        }
        if(propertyIndex==count+37)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "attachmentMethod";
            info.namespace= "";
        }
        if(propertyIndex==count+38)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "inForceFromDate";
            info.namespace= "";
        }
        if(propertyIndex==count+39)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "administrationChannel";
            info.namespace= "";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

