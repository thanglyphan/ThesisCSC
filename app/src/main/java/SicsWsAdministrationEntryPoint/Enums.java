package SicsWsAdministrationEntryPoint;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 29/01/2017
//
//---------------------------------------------------





public class Enums
{

    public enum ProgramPartType
    {
        
        PT(0),
        
        XL(1),
        
        SL(2);
        
        private int code;
        
        ProgramPartType(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static ProgramPartType fromString(String str)
        {
            if (str.equals("PT"))
                return PT;
            if (str.equals("XL"))
                return XL;
            if (str.equals("SL"))
                return SL;
		    return null;
        }
    }

    public enum RefDataStatus
    {
        
        all(0),
        
        active(1),
        
        inactive(2);
        
        private int code;
        
        RefDataStatus(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static RefDataStatus fromString(String str)
        {
            if (str.equals("all"))
                return all;
            if (str.equals("active"))
                return active;
            if (str.equals("inactive"))
                return inactive;
		    return null;
        }
    }

    public enum BusinessConditionDeleteable
    {
        
        accountsCommonCondition(0),
        
        claimCondition(1),
        
        deductiblesCondition(2),
        
        deductionBrokerageCondition(3),
        
        deductionCommissionCondition(4),
        
        deductionOthersCondition(5),
        
        cancellationCondition(6),
        
        indexClauseConditionContainer(7),
        
        limitPremiumCondition(8),
        
        depositPremiumCondition(9),
        
        instalmentCondition(10),
        
        adjustmentCondition(11),
        
        profitCommissionCondition(12),
        
        rebateCondition(13),
        
        reinstatementConditionContainer(14),
        
        shareCondition(15),
        
        userDefinedFieldsCondition1(16),
        
        userDefinedFieldsCondition2(17),
        
        userDefinedFieldsCondition3(18),
        
        userDefinedFieldsCondition4(19),
        
        userDefinedFieldsCondition5(20),
        
        userDefinedFieldsCondition6(21),
        
        userDefinedFieldsCondition7(22),
        
        userDefinedFieldsCondition8(23),
        
        userDefinedFieldsCondition9(24),
        
        userDefinedFieldsCondition10(25),
        
        depositCondition(26),
        
        portfolioCondition(27),
        
        reserveCondition(28),
        
        insurancePremiumTaxCondition(29),
        
        clauseCondition(30);
        
        private int code;
        
        BusinessConditionDeleteable(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static BusinessConditionDeleteable fromString(String str)
        {
            if (str.equals("accountsCommonCondition"))
                return accountsCommonCondition;
            if (str.equals("claimCondition"))
                return claimCondition;
            if (str.equals("deductiblesCondition"))
                return deductiblesCondition;
            if (str.equals("deductionBrokerageCondition"))
                return deductionBrokerageCondition;
            if (str.equals("deductionCommissionCondition"))
                return deductionCommissionCondition;
            if (str.equals("deductionOthersCondition"))
                return deductionOthersCondition;
            if (str.equals("cancellationCondition"))
                return cancellationCondition;
            if (str.equals("indexClauseConditionContainer"))
                return indexClauseConditionContainer;
            if (str.equals("limitPremiumCondition"))
                return limitPremiumCondition;
            if (str.equals("depositPremiumCondition"))
                return depositPremiumCondition;
            if (str.equals("instalmentCondition"))
                return instalmentCondition;
            if (str.equals("adjustmentCondition"))
                return adjustmentCondition;
            if (str.equals("profitCommissionCondition"))
                return profitCommissionCondition;
            if (str.equals("rebateCondition"))
                return rebateCondition;
            if (str.equals("reinstatementConditionContainer"))
                return reinstatementConditionContainer;
            if (str.equals("shareCondition"))
                return shareCondition;
            if (str.equals("userDefinedFieldsCondition1"))
                return userDefinedFieldsCondition1;
            if (str.equals("userDefinedFieldsCondition2"))
                return userDefinedFieldsCondition2;
            if (str.equals("userDefinedFieldsCondition3"))
                return userDefinedFieldsCondition3;
            if (str.equals("userDefinedFieldsCondition4"))
                return userDefinedFieldsCondition4;
            if (str.equals("userDefinedFieldsCondition5"))
                return userDefinedFieldsCondition5;
            if (str.equals("userDefinedFieldsCondition6"))
                return userDefinedFieldsCondition6;
            if (str.equals("userDefinedFieldsCondition7"))
                return userDefinedFieldsCondition7;
            if (str.equals("userDefinedFieldsCondition8"))
                return userDefinedFieldsCondition8;
            if (str.equals("userDefinedFieldsCondition9"))
                return userDefinedFieldsCondition9;
            if (str.equals("userDefinedFieldsCondition10"))
                return userDefinedFieldsCondition10;
            if (str.equals("depositCondition"))
                return depositCondition;
            if (str.equals("portfolioCondition"))
                return portfolioCondition;
            if (str.equals("reserveCondition"))
                return reserveCondition;
            if (str.equals("insurancePremiumTaxCondition"))
                return insurancePremiumTaxCondition;
            if (str.equals("clauseCondition"))
                return clauseCondition;
		    return null;
        }
    }

	/**
	* Please note that xsd:enumeration is a facet which can only be more restricitive
	*             and we therefore repeat the values we need.
	*/
    public enum BusinessCondition
    {
        
        accountsCommonCondition(0),
        
        claimCondition(1),
        
        deductiblesCondition(2),
        
        deductionBrokerageCondition(3),
        
        deductionCommissionCondition(4),
        
        deductionOthersCondition(5),
        
        cancellationCondition(6),
        
        indexClauseConditionContainer(7),
        
        limitPremiumCondition(8),
        
        depositPremiumCondition(9),
        
        profitCommissionCondition(10),
        
        rebateCondition(11),
        
        reinstatementConditionContainer(12),
        
        shareCondition(13),
        
        userDefinedFieldsCondition1(14),
        
        userDefinedFieldsCondition2(15),
        
        userDefinedFieldsCondition3(16),
        
        userDefinedFieldsCondition4(17),
        
        userDefinedFieldsCondition5(18),
        
        userDefinedFieldsCondition6(19),
        
        userDefinedFieldsCondition7(20),
        
        userDefinedFieldsCondition8(21),
        
        userDefinedFieldsCondition9(22),
        
        userDefinedFieldsCondition10(23),
        
        clauseCondition(24);
        
        private int code;
        
        BusinessCondition(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static BusinessCondition fromString(String str)
        {
            if (str.equals("accountsCommonCondition"))
                return accountsCommonCondition;
            if (str.equals("claimCondition"))
                return claimCondition;
            if (str.equals("deductiblesCondition"))
                return deductiblesCondition;
            if (str.equals("deductionBrokerageCondition"))
                return deductionBrokerageCondition;
            if (str.equals("deductionCommissionCondition"))
                return deductionCommissionCondition;
            if (str.equals("deductionOthersCondition"))
                return deductionOthersCondition;
            if (str.equals("cancellationCondition"))
                return cancellationCondition;
            if (str.equals("indexClauseConditionContainer"))
                return indexClauseConditionContainer;
            if (str.equals("limitPremiumCondition"))
                return limitPremiumCondition;
            if (str.equals("depositPremiumCondition"))
                return depositPremiumCondition;
            if (str.equals("profitCommissionCondition"))
                return profitCommissionCondition;
            if (str.equals("rebateCondition"))
                return rebateCondition;
            if (str.equals("reinstatementConditionContainer"))
                return reinstatementConditionContainer;
            if (str.equals("shareCondition"))
                return shareCondition;
            if (str.equals("userDefinedFieldsCondition1"))
                return userDefinedFieldsCondition1;
            if (str.equals("userDefinedFieldsCondition2"))
                return userDefinedFieldsCondition2;
            if (str.equals("userDefinedFieldsCondition3"))
                return userDefinedFieldsCondition3;
            if (str.equals("userDefinedFieldsCondition4"))
                return userDefinedFieldsCondition4;
            if (str.equals("userDefinedFieldsCondition5"))
                return userDefinedFieldsCondition5;
            if (str.equals("userDefinedFieldsCondition6"))
                return userDefinedFieldsCondition6;
            if (str.equals("userDefinedFieldsCondition7"))
                return userDefinedFieldsCondition7;
            if (str.equals("userDefinedFieldsCondition8"))
                return userDefinedFieldsCondition8;
            if (str.equals("userDefinedFieldsCondition9"))
                return userDefinedFieldsCondition9;
            if (str.equals("userDefinedFieldsCondition10"))
                return userDefinedFieldsCondition10;
            if (str.equals("clauseCondition"))
                return clauseCondition;
		    return null;
        }
    }

    public enum ProgramPartType_1
    {
        
        PT(0),
        
        XL(1),
        
        SL(2);
        
        private int code;
        
        ProgramPartType_1(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static ProgramPartType_1 fromString(String str)
        {
            if (str.equals("PT"))
                return PT;
            if (str.equals("XL"))
                return XL;
            if (str.equals("SL"))
                return SL;
		    return null;
        }
    }

    public enum SteppedSlidingScaleOperations
    {
        
        InsertBefore(0),
        
        InsertAfter(1),
        
        Delete(2),
        
        Update(3);
        
        private int code;
        
        SteppedSlidingScaleOperations(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static SteppedSlidingScaleOperations fromString(String str)
        {
            if (str.equals("InsertBefore"))
                return InsertBefore;
            if (str.equals("InsertAfter"))
                return InsertAfter;
            if (str.equals("Delete"))
                return Delete;
            if (str.equals("Update"))
                return Update;
		    return null;
        }
    }

    public enum ShareFigureOption
    {
        
        _100_x0025_Share(0,"100%Share"),
        
        ourShare(1,"ourShare"),
        
        ceded(2,"ceded");
        
        private int code;
        private java.lang.String xmlValue;
        
        ShareFigureOption(int code ,java.lang.String xmlValue){
            this.code = code;
            this.xmlValue=xmlValue;
        }
    
        public int getCode(){
		    return code;
	    }
    
        @Override
        public String toString() {
            return xmlValue;
        }

        public static ShareFigureOption fromString(String str)
        {
            if (str.equals("100%Share"))
                return _100_x0025_Share;
            if (str.equals("ourShare"))
                return ourShare;
            if (str.equals("ceded"))
                return ceded;
		    return null;
        }
    }

    public enum AllDueOrNotDueBalances
    {
        
        all(0),
        
        due(1),
        
        notDue(2);
        
        private int code;
        
        AllDueOrNotDueBalances(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static AllDueOrNotDueBalances fromString(String str)
        {
            if (str.equals("all"))
                return all;
            if (str.equals("due"))
                return due;
            if (str.equals("notDue"))
                return notDue;
		    return null;
        }
    }

    public enum BusinessTypes
    {
        
        all(0),
        
        inward(1),
        
        outward(2);
        
        private int code;
        
        BusinessTypes(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static BusinessTypes fromString(String str)
        {
            if (str.equals("all"))
                return all;
            if (str.equals("inward"))
                return inward;
            if (str.equals("outward"))
                return outward;
		    return null;
        }
    }

    public enum BookingYearPeriodComparision
    {
        
        after(0),
        
        before(1),
        
        equalTo(2);
        
        private int code;
        
        BookingYearPeriodComparision(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static BookingYearPeriodComparision fromString(String str)
        {
            if (str.equals("after"))
                return after;
            if (str.equals("before"))
                return before;
            if (str.equals("equalTo"))
                return equalTo;
		    return null;
        }
    }

    public enum MoveClaimOption
    {
        
        MoveClaimToAnotherClaimsProgram(0),
        
        MoveClaimOnSameSourceTreaty(1),
        
        MoveClaimOnAnotherTreaty(2);
        
        private int code;
        
        MoveClaimOption(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static MoveClaimOption fromString(String str)
        {
            if (str.equals("MoveClaimToAnotherClaimsProgram"))
                return MoveClaimToAnotherClaimsProgram;
            if (str.equals("MoveClaimOnSameSourceTreaty"))
                return MoveClaimOnSameSourceTreaty;
            if (str.equals("MoveClaimOnAnotherTreaty"))
                return MoveClaimOnAnotherTreaty;
		    return null;
        }
    }

    public enum MatchingPAMessage
    {
        
        Multiple_x0020_PA(0,"Multiple PA"),
        
        No_x0020_PA(1,"No PA");
        
        private int code;
        private java.lang.String xmlValue;
        
        MatchingPAMessage(int code ,java.lang.String xmlValue){
            this.code = code;
            this.xmlValue=xmlValue;
        }
    
        public int getCode(){
		    return code;
	    }
    
        @Override
        public String toString() {
            return xmlValue;
        }

        public static MatchingPAMessage fromString(String str)
        {
            if (str.equals("Multiple PA"))
                return Multiple_x0020_PA;
            if (str.equals("No PA"))
                return No_x0020_PA;
		    return null;
        }
    }

    public enum EMessagingRuleType
    {
        
        Reference(0),
        
        Validate(1),
        
        Apply(2);
        
        private int code;
        
        EMessagingRuleType(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static EMessagingRuleType fromString(String str)
        {
            if (str.equals("Reference"))
                return Reference;
            if (str.equals("Validate"))
                return Validate;
            if (str.equals("Apply"))
                return Apply;
		    return null;
        }
    }

    public enum SelectedBusinessFlag
    {
        
        All(0,"All"),
        
        Direct_x0020_Only(1,"Direct Only"),
        
        Brokered_x0020_Only(2,"Brokered Only");
        
        private int code;
        private java.lang.String xmlValue;
        
        SelectedBusinessFlag(int code ,java.lang.String xmlValue){
            this.code = code;
            this.xmlValue=xmlValue;
        }
    
        public int getCode(){
		    return code;
	    }
    
        @Override
        public String toString() {
            return xmlValue;
        }

        public static SelectedBusinessFlag fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("Direct Only"))
                return Direct_x0020_Only;
            if (str.equals("Brokered Only"))
                return Brokered_x0020_Only;
		    return null;
        }
    }

    public enum BusinessStatuses
    {
        
        Active(0),
        
        Inactive(1),
        
        All(2);
        
        private int code;
        
        BusinessStatuses(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static BusinessStatuses fromString(String str)
        {
            if (str.equals("Active"))
                return Active;
            if (str.equals("Inactive"))
                return Inactive;
            if (str.equals("All"))
                return All;
		    return null;
        }
    }

    public enum SortOption
    {
        
        noSort(0),
        
        claimIdentifier(1),
        
        lossDate(2),
        
        name(3);
        
        private int code;
        
        SortOption(int code ){
            this.code = code;
        }
    
        public int getCode(){
		    return code;
	    }
    

        public static SortOption fromString(String str)
        {
            if (str.equals("noSort"))
                return noSort;
            if (str.equals("claimIdentifier"))
                return claimIdentifier;
            if (str.equals("lossDate"))
                return lossDate;
            if (str.equals("name"))
                return name;
		    return null;
        }
    }

    public enum SelectedClaimFlagStatuses
    {
        
        All(0,"All"),
        
        APH_x0020_Only(1,"APH Only"),
        
        Non_x0020_APH(2,"Non APH");
        
        private int code;
        private java.lang.String xmlValue;
        
        SelectedClaimFlagStatuses(int code ,java.lang.String xmlValue){
            this.code = code;
            this.xmlValue=xmlValue;
        }
    
        public int getCode(){
		    return code;
	    }
    
        @Override
        public String toString() {
            return xmlValue;
        }

        public static SelectedClaimFlagStatuses fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("APH Only"))
                return APH_x0020_Only;
            if (str.equals("Non APH"))
                return Non_x0020_APH;
		    return null;
        }
    }

}