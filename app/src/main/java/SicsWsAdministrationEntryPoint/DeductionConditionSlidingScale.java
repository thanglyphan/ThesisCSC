package SicsWsAdministrationEntryPoint;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 29/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.math.BigDecimal;

public class DeductionConditionSlidingScale extends DomainObject implements KvmSerializable,java.io.Serializable
{

    
	/**
	* Entry Code Group where category = (SUBCLASS=223, CODE= "PRELR")
	*                      Premium
	*/
    public SicsAccountingEntryCodeGroupReference premiumEntryCodeGroup;
    
	/**
	* Include Reserve (Premium)
	*/
    public Boolean premiumIncludeReserve;
    
	/**
	* Entry Code Group where category = (SUBCLASS=223, CODE= "LOSSLR")
	*                      Loss
	*/
    public SicsAccountingEntryCodeGroupReference lossEntryCodeGroup;
    
	/**
	* Include Reserve (Loss)
	*/
    public Boolean lossIncludeReserve;
    
	/**
	* Commission % (Minimum)
	*/
    public BigDecimal minimumCommission;
    
	/**
	* Commission % (Interim 1)
	*/
    public BigDecimal commissionInterim1;
    
	/**
	* Commission % (Interim 2)
	*/
    public BigDecimal commissionInterim2;
    
	/**
	* Commission % (Maximum)
	*/
    public BigDecimal maximumCommission;
    
	/**
	* Loss Ratio (Minimum)
	*/
    public BigDecimal minimumLossRatio;
    
	/**
	* Loss Ratio (Interim 1)
	*/
    public BigDecimal lossRatioInterim1;
    
	/**
	* Loss Ratio (Interim 2)
	*/
    public BigDecimal lossRatioInterim2;
    
	/**
	* Loss Ratio (Maximum)
	*/
    public BigDecimal maximumLossRatio;
    
	/**
	* "M" | "Y" only, 0->99
	*                      First Calculation After
	*/
    public SicsWsTimeDurationReference firstCalculationPeriod;
    
	/**
	* "M" | "Y" only, 0->99
	*                      Subsequent Calc. Every
	*/
    public SicsWsTimeDurationReference subsequentCalculationFrequency;
    
	/**
	* Note: The allowed set of values ranges from -9 to 99 (inclusive of both values).
	*                      Credit Carried Forward
	*/
    public Integer periodsForMinimumILBF;
    
	/**
	* To Extinction (Credit)
	*/
    public Boolean ccfToExtinction;
    
	/**
	* Note: The allowed set of values ranges from -9 to 99 (inclusive of both values).
	*                      Deficit Carried Forward
	*/
    public Integer periodsForMaximumILBF;
    
	/**
	* To Extinction (Deficit)
	*/
    public Boolean dcfToExtinction;
    
	/**
	* SUBCLASS=125, CODE= "UNDEFINED" | "NONE" | "ORIGINAL" | "PERCENT"
	*                      (Provisional Commission)
	*/
    public SicsReferenceDataReference provisionalCommissionType;
    
	/**
	* %
	*/
    public BigDecimal provisionalCommissionPercent;
    
	/**
	* When percent not defined or has no category, Entry Code Group where category = (SUBCLASS=223, CODE= "SUPIP"). Otherwise Entry Code Group where category = (same as percent).
	*                      of
	*/
    public SicsAccountingEntryCodeGroupReference provisionalCommissionEntryCodeGroup;
    
	/**
	* Loss Ratio
	*/
    public BigDecimal provisionalCommissionLossRatio;
    
	/**
	* No / Yes
	*/
    public Boolean useAverageBasis;
    
	/**
	* Only used when "useAverageBasis" = "Yes".
	*                      Result Avg. Periods
	*/
    public Integer resultAveragePeriods;
    
	/**
	* Only used when "useAverageBasis" = "Yes".
	*                      (Rating Period) From
	*/
    public java.util.Date ratingPeriodFromDate;
    
	/**
	* Only used when "useAverageBasis" = "Yes".
	*                      (Rating Period) To
	*/
    public java.util.Date ratingPeriodToDate;

    public DeductionConditionSlidingScale ()
    {
    }

    public DeductionConditionSlidingScale (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("premiumEntryCodeGroup"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.premiumEntryCodeGroup = (SicsAccountingEntryCodeGroupReference)__envelope.get(j,SicsAccountingEntryCodeGroupReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("premiumIncludeReserve"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.premiumIncludeReserve = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.premiumIncludeReserve = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("lossEntryCodeGroup"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.lossEntryCodeGroup = (SicsAccountingEntryCodeGroupReference)__envelope.get(j,SicsAccountingEntryCodeGroupReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("lossIncludeReserve"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.lossIncludeReserve = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.lossIncludeReserve = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("minimumCommission"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.minimumCommission = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.minimumCommission = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("commissionInterim1"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.commissionInterim1 = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.commissionInterim1 = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("commissionInterim2"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.commissionInterim2 = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.commissionInterim2 = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("maximumCommission"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.maximumCommission = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.maximumCommission = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("minimumLossRatio"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.minimumLossRatio = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.minimumLossRatio = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("lossRatioInterim1"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.lossRatioInterim1 = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.lossRatioInterim1 = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("lossRatioInterim2"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.lossRatioInterim2 = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.lossRatioInterim2 = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("maximumLossRatio"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.maximumLossRatio = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.maximumLossRatio = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("firstCalculationPeriod"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.firstCalculationPeriod = (SicsWsTimeDurationReference)__envelope.get(j,SicsWsTimeDurationReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("subsequentCalculationFrequency"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.subsequentCalculationFrequency = (SicsWsTimeDurationReference)__envelope.get(j,SicsWsTimeDurationReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("periodsForMinimumILBF"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.periodsForMinimumILBF = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.periodsForMinimumILBF = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("ccfToExtinction"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.ccfToExtinction = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.ccfToExtinction = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("periodsForMaximumILBF"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.periodsForMaximumILBF = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.periodsForMaximumILBF = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("dcfToExtinction"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.dcfToExtinction = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.dcfToExtinction = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("provisionalCommissionType"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.provisionalCommissionType = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("provisionalCommissionPercent"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.provisionalCommissionPercent = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.provisionalCommissionPercent = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("provisionalCommissionEntryCodeGroup"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.provisionalCommissionEntryCodeGroup = (SicsAccountingEntryCodeGroupReference)__envelope.get(j,SicsAccountingEntryCodeGroupReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("provisionalCommissionLossRatio"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.provisionalCommissionLossRatio = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.provisionalCommissionLossRatio = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("useAverageBasis"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.useAverageBasis = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.useAverageBasis = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("resultAveragePeriods"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.resultAveragePeriods = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.resultAveragePeriods = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("ratingPeriodFromDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.ratingPeriodFromDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.ratingPeriodFromDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("ratingPeriodToDate"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.ratingPeriodToDate = Helper.ConvertFromWebService(j.toString());
                            }
                        }
                        else if (obj instanceof java.util.Date){
                            this.ratingPeriodToDate = (java.util.Date)obj;
                        }
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return premiumEntryCodeGroup;
        }
        if(propertyIndex==count+1)
        {
            return this.premiumIncludeReserve!=null?this.premiumIncludeReserve:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return lossEntryCodeGroup;
        }
        if(propertyIndex==count+3)
        {
            return this.lossIncludeReserve!=null?this.lossIncludeReserve:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+4)
        {
            return this.minimumCommission!=null?this.minimumCommission.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+5)
        {
            return this.commissionInterim1!=null?this.commissionInterim1.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return this.commissionInterim2!=null?this.commissionInterim2.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+7)
        {
            return this.maximumCommission!=null?this.maximumCommission.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+8)
        {
            return this.minimumLossRatio!=null?this.minimumLossRatio.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+9)
        {
            return this.lossRatioInterim1!=null?this.lossRatioInterim1.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+10)
        {
            return this.lossRatioInterim2!=null?this.lossRatioInterim2.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+11)
        {
            return this.maximumLossRatio!=null?this.maximumLossRatio.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+12)
        {
            return this.firstCalculationPeriod!=null?this.firstCalculationPeriod:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+13)
        {
            return this.subsequentCalculationFrequency!=null?this.subsequentCalculationFrequency:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+14)
        {
            return this.periodsForMinimumILBF!=null?this.periodsForMinimumILBF:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+15)
        {
            return this.ccfToExtinction!=null?this.ccfToExtinction:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+16)
        {
            return this.periodsForMaximumILBF!=null?this.periodsForMaximumILBF:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+17)
        {
            return this.dcfToExtinction!=null?this.dcfToExtinction:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+18)
        {
            return this.provisionalCommissionType!=null?this.provisionalCommissionType:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+19)
        {
            return this.provisionalCommissionPercent!=null?this.provisionalCommissionPercent.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+20)
        {
            return this.provisionalCommissionEntryCodeGroup!=null?this.provisionalCommissionEntryCodeGroup:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+21)
        {
            return this.provisionalCommissionLossRatio!=null?this.provisionalCommissionLossRatio.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+22)
        {
            return this.useAverageBasis!=null?this.useAverageBasis:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+23)
        {
            return this.resultAveragePeriods!=null?this.resultAveragePeriods:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+24)
        {
            return this.ratingPeriodFromDate!=null?Helper.getDateFormat().format(this.ratingPeriodFromDate):SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+25)
        {
            return this.ratingPeriodToDate!=null?Helper.getDateFormat().format(this.ratingPeriodToDate):SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+26;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = SicsAccountingEntryCodeGroupReference.class;
            info.name = "premiumEntryCodeGroup";
            info.namespace= "";
        }
        if(propertyIndex==count+1)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "premiumIncludeReserve";
            info.namespace= "";
        }
        if(propertyIndex==count+2)
        {
            info.type = SicsAccountingEntryCodeGroupReference.class;
            info.name = "lossEntryCodeGroup";
            info.namespace= "";
        }
        if(propertyIndex==count+3)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "lossIncludeReserve";
            info.namespace= "";
        }
        if(propertyIndex==count+4)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "minimumCommission";
            info.namespace= "";
        }
        if(propertyIndex==count+5)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "commissionInterim1";
            info.namespace= "";
        }
        if(propertyIndex==count+6)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "commissionInterim2";
            info.namespace= "";
        }
        if(propertyIndex==count+7)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "maximumCommission";
            info.namespace= "";
        }
        if(propertyIndex==count+8)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "minimumLossRatio";
            info.namespace= "";
        }
        if(propertyIndex==count+9)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "lossRatioInterim1";
            info.namespace= "";
        }
        if(propertyIndex==count+10)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "lossRatioInterim2";
            info.namespace= "";
        }
        if(propertyIndex==count+11)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "maximumLossRatio";
            info.namespace= "";
        }
        if(propertyIndex==count+12)
        {
            info.type = SicsWsTimeDurationReference.class;
            info.name = "firstCalculationPeriod";
            info.namespace= "";
        }
        if(propertyIndex==count+13)
        {
            info.type = SicsWsTimeDurationReference.class;
            info.name = "subsequentCalculationFrequency";
            info.namespace= "";
        }
        if(propertyIndex==count+14)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "periodsForMinimumILBF";
            info.namespace= "";
        }
        if(propertyIndex==count+15)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "ccfToExtinction";
            info.namespace= "";
        }
        if(propertyIndex==count+16)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "periodsForMaximumILBF";
            info.namespace= "";
        }
        if(propertyIndex==count+17)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "dcfToExtinction";
            info.namespace= "";
        }
        if(propertyIndex==count+18)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "provisionalCommissionType";
            info.namespace= "";
        }
        if(propertyIndex==count+19)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "provisionalCommissionPercent";
            info.namespace= "";
        }
        if(propertyIndex==count+20)
        {
            info.type = SicsAccountingEntryCodeGroupReference.class;
            info.name = "provisionalCommissionEntryCodeGroup";
            info.namespace= "";
        }
        if(propertyIndex==count+21)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "provisionalCommissionLossRatio";
            info.namespace= "";
        }
        if(propertyIndex==count+22)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "useAverageBasis";
            info.namespace= "";
        }
        if(propertyIndex==count+23)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "resultAveragePeriods";
            info.namespace= "";
        }
        if(propertyIndex==count+24)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "ratingPeriodFromDate";
            info.namespace= "";
        }
        if(propertyIndex==count+25)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "ratingPeriodToDate";
            info.namespace= "";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

