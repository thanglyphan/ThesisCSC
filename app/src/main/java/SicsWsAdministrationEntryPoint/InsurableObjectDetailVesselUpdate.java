package SicsWsAdministrationEntryPoint;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 29/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.math.BigDecimal;

public class InsurableObjectDetailVesselUpdate extends InsurableObjectDetailUpdate implements KvmSerializable,java.io.Serializable
{

    
	/**
	* Flag
	*/
    public SicsCountryReference flaggedInCountry;
    
	/**
	* SubclassNumber: 535. SicsRefInsurableObjectClassification
	*                Classification
	*/
    public SicsReferenceDataReference typeTradeClassification;
    
	/**
	* SubclassNumber: 115. SicsRefVesselTypeTrade
	*                Type of Vessel
	*/
    public SicsReferenceDataReference typeTrade;
    
	/**
	* SubclassNumber: 572. SicsRefVesselClassSoc
	*/
    public SicsReferenceDataReference classificationSociety;
    
    public SicsBusinessPartnerReference manager;
    
	/**
	* P and I Clubs
	*/
    public SicsBusinessPartnerReference piClub;
    
	/**
	* No. of Crew
	*/
    public Long numberOfCrew;
    
	/**
	* ISM Safety Mngmt System implemented
	*/
    public String ismSafetyMgntSystem;
    
	/**
	* SubclassNumber: 575. SicsRefVesselImsOrg
	*                Approved By
	*/
    public SicsReferenceDataReference ismOrg;
    
	/**
	* SubclassNumber: 117. SicsRefVesselPropulsionType
	*/
    public SicsReferenceDataReference propulsionType;
    
	/**
	* SubclassNumber: 118. SicsRefEngineType
	*/
    public SicsReferenceDataReference engineType;
    
    public String engineTypeDetail;
    
    public String mainEngineBuilt;
    
	/**
	* SubclassNumber: 574. SicsRefVesselEngManufacturer
	*/
    public SicsReferenceDataReference engineManufacturer;
    
	/**
	* SubclassNumber: 573. SicsRefVesselRpm
	*/
    public SicsReferenceDataReference rpm;
    
	/**
	* Power kw
	*/
    public BigDecimal power;
    
	/**
	* Fuel Capacity - Field
	*/
    public Long fuelCapacity;
    
	/**
	* SubclassNumber: 123. SicsRefVolumeMeasurement
	*                Fuel Capacity - Drop down
	*/
    public SicsReferenceDataReference fuelCapacityType;
    
	/**
	* No. of Engines
	*/
    public Long numberOfEngines;
    
	/**
	* Speed - Field
	*/
    public BigDecimal speed;
    
	/**
	* SubclassNumber: 119. SicsRefSpeedMeasurement
	*                Speed - Drop down
	*/
    public SicsReferenceDataReference speedMeasurement;
    
	/**
	* No. of Masts
	*/
    public Long numberOfMasts;
    
	/**
	* SubclassNumber: 121. SicsRefVesselConstruction
	*                Construction Type
	*/
    public SicsReferenceDataReference construction;
    
    public SicsCountryReference countryBuilt;
    
    public Integer yearBuilt;
    
	/**
	* Manufacturer
	*/
    public SicsBusinessPartnerReference shipYard;
    
	/**
	* Year Rebuilt
	*/
    public String rebuildingYear;
    
	/**
	* Manufacturer
	*/
    public SicsBusinessPartnerReference rebuildingManufacturer;
    
	/**
	* Notes tab
	*/
    public String technicalNote;
    
	/**
	* DWT
	*/
    public BigDecimal deadWeightTonnage;
    
	/**
	* NWT
	*/
    public BigDecimal netWeightTonnage;
    
	/**
	* GW
	*/
    public BigDecimal grossWeightTonnage;
    
	/**
	* SubclassNumber: 124. SicsRefVesselType
	*                Type
	*/
    public SicsReferenceDataReference vesselType;
    
	/**
	* Value - Field
	*/
    public Long capacity;
    
	/**
	* SubclassNumber: 122. SicsRefVesselCapacity
	*                Value - Drop down
	*/
    public SicsReferenceDataReference capacityType;
    
	/**
	* Water Capacity - Field
	*/
    public BigDecimal waterCapacity;
    
	/**
	* SubclassNumber: 123. SicsRefVolumeMeasurement
	*                Water Capacity - Drop down
	*/
    public SicsReferenceDataReference waterCapacityType;
    
	/**
	* Overall Length - Field
	*/
    public Long overAllLength;
    
	/**
	* SubclassNumber: 104. SicsRefDistanceMeasurement
	*                Overall Length - Drop down
	*/
    public SicsReferenceDataReference overAllLengthMeasurement;
    
	/**
	* Ext. Breadth - Field
	*/
    public BigDecimal extremeBreadth;
    
	/**
	* SubclassNumber: 104. SicsRefDistanceMeasurement
	*                Ext. Breadth - Drop down
	*/
    public SicsReferenceDataReference extremeBreadthMeasurement;
    
	/**
	* Depth Moulded - Field
	*/
    public BigDecimal depthMoulded;
    
	/**
	* SubclassNumber: 104. SicsRefDistanceMeasurement
	*                Depth Moulded - Drop down
	*/
    public SicsReferenceDataReference depthMouldedMeasurement;
    
	/**
	* Draught Larger - Field
	*/
    public BigDecimal draughtLarger;
    
	/**
	* SubclassNumber: 104. SicsRefDistanceMeasurement
	*                Draught Larger - Drop down
	*/
    public SicsReferenceDataReference draughtLargerMeasurement;
    
	/**
	* Draught Smaller - Field
	*/
    public BigDecimal draughtSmaller;
    
	/**
	* SubclassNumber: 104. SicsRefDistanceMeasurement
	*                Draught Smaller - Drop down
	*/
    public SicsReferenceDataReference draughtSmallerMeasurement;
    
	/**
	* Keel - Field
	*/
    public Long keel;
    
	/**
	* SubclassNumber: 104. SicsRefDistanceMeasurement
	*                Keel - Drop down
	*/
    public SicsReferenceDataReference keelMeasurement;

    public InsurableObjectDetailVesselUpdate ()
    {
    }

    public InsurableObjectDetailVesselUpdate (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("flaggedInCountry"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.flaggedInCountry = (SicsCountryReference)__envelope.get(j,SicsCountryReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("typeTradeClassification"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.typeTradeClassification = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("typeTrade"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.typeTrade = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("classificationSociety"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.classificationSociety = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("manager"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.manager = (SicsBusinessPartnerReference)__envelope.get(j,SicsBusinessPartnerReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("piClub"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.piClub = (SicsBusinessPartnerReference)__envelope.get(j,SicsBusinessPartnerReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("numberOfCrew"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.numberOfCrew = new Long(j.toString());
                            }
                        }
                        else if (obj instanceof Long){
                            this.numberOfCrew = (Long)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("ismSafetyMgntSystem"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.ismSafetyMgntSystem = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.ismSafetyMgntSystem = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("ismOrg"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.ismOrg = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("propulsionType"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.propulsionType = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("engineType"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.engineType = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("engineTypeDetail"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.engineTypeDetail = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.engineTypeDetail = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("mainEngineBuilt"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.mainEngineBuilt = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.mainEngineBuilt = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("engineManufacturer"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.engineManufacturer = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("rpm"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.rpm = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("power"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.power = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.power = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("fuelCapacity"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.fuelCapacity = new Long(j.toString());
                            }
                        }
                        else if (obj instanceof Long){
                            this.fuelCapacity = (Long)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("fuelCapacityType"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.fuelCapacityType = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("numberOfEngines"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.numberOfEngines = new Long(j.toString());
                            }
                        }
                        else if (obj instanceof Long){
                            this.numberOfEngines = (Long)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("speed"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.speed = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.speed = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("speedMeasurement"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.speedMeasurement = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("numberOfMasts"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.numberOfMasts = new Long(j.toString());
                            }
                        }
                        else if (obj instanceof Long){
                            this.numberOfMasts = (Long)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("construction"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.construction = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("countryBuilt"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.countryBuilt = (SicsCountryReference)__envelope.get(j,SicsCountryReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("yearBuilt"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.yearBuilt = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.yearBuilt = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("shipYard"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.shipYard = (SicsBusinessPartnerReference)__envelope.get(j,SicsBusinessPartnerReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("rebuildingYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.rebuildingYear = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.rebuildingYear = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("rebuildingManufacturer"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.rebuildingManufacturer = (SicsBusinessPartnerReference)__envelope.get(j,SicsBusinessPartnerReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("technicalNote"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.technicalNote = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.technicalNote = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("deadWeightTonnage"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.deadWeightTonnage = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.deadWeightTonnage = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("netWeightTonnage"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.netWeightTonnage = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.netWeightTonnage = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("grossWeightTonnage"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.grossWeightTonnage = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.grossWeightTonnage = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("vesselType"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.vesselType = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("capacity"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.capacity = new Long(j.toString());
                            }
                        }
                        else if (obj instanceof Long){
                            this.capacity = (Long)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("capacityType"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.capacityType = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("waterCapacity"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.waterCapacity = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.waterCapacity = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("waterCapacityType"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.waterCapacityType = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("overAllLength"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.overAllLength = new Long(j.toString());
                            }
                        }
                        else if (obj instanceof Long){
                            this.overAllLength = (Long)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("overAllLengthMeasurement"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.overAllLengthMeasurement = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("extremeBreadth"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.extremeBreadth = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.extremeBreadth = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("extremeBreadthMeasurement"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.extremeBreadthMeasurement = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("depthMoulded"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.depthMoulded = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.depthMoulded = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("depthMouldedMeasurement"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.depthMouldedMeasurement = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("draughtLarger"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.draughtLarger = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.draughtLarger = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("draughtLargerMeasurement"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.draughtLargerMeasurement = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("draughtSmaller"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.draughtSmaller = new BigDecimal(j.toString());
                            }
                        }
                        else if (obj instanceof BigDecimal){
                            this.draughtSmaller = (BigDecimal)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("draughtSmallerMeasurement"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.draughtSmallerMeasurement = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("keel"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.keel = new Long(j.toString());
                            }
                        }
                        else if (obj instanceof Long){
                            this.keel = (Long)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("keelMeasurement"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.keelMeasurement = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.flaggedInCountry!=null?this.flaggedInCountry:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.typeTradeClassification!=null?this.typeTradeClassification:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return this.typeTrade!=null?this.typeTrade:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+3)
        {
            return this.classificationSociety!=null?this.classificationSociety:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+4)
        {
            return this.manager!=null?this.manager:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+5)
        {
            return this.piClub!=null?this.piClub:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return this.numberOfCrew!=null?this.numberOfCrew:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+7)
        {
            return this.ismSafetyMgntSystem!=null?this.ismSafetyMgntSystem:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+8)
        {
            return this.ismOrg!=null?this.ismOrg:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+9)
        {
            return this.propulsionType!=null?this.propulsionType:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+10)
        {
            return this.engineType!=null?this.engineType:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+11)
        {
            return this.engineTypeDetail!=null?this.engineTypeDetail:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+12)
        {
            return this.mainEngineBuilt!=null?this.mainEngineBuilt:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+13)
        {
            return this.engineManufacturer!=null?this.engineManufacturer:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+14)
        {
            return this.rpm!=null?this.rpm:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+15)
        {
            return this.power!=null?this.power.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+16)
        {
            return this.fuelCapacity!=null?this.fuelCapacity:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+17)
        {
            return this.fuelCapacityType!=null?this.fuelCapacityType:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+18)
        {
            return this.numberOfEngines!=null?this.numberOfEngines:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+19)
        {
            return this.speed!=null?this.speed.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+20)
        {
            return this.speedMeasurement!=null?this.speedMeasurement:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+21)
        {
            return this.numberOfMasts!=null?this.numberOfMasts:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+22)
        {
            return this.construction!=null?this.construction:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+23)
        {
            return this.countryBuilt!=null?this.countryBuilt:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+24)
        {
            return this.yearBuilt!=null?this.yearBuilt:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+25)
        {
            return this.shipYard!=null?this.shipYard:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+26)
        {
            return this.rebuildingYear!=null?this.rebuildingYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+27)
        {
            return this.rebuildingManufacturer!=null?this.rebuildingManufacturer:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+28)
        {
            return this.technicalNote!=null?this.technicalNote:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+29)
        {
            return this.deadWeightTonnage!=null?this.deadWeightTonnage.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+30)
        {
            return this.netWeightTonnage!=null?this.netWeightTonnage.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+31)
        {
            return this.grossWeightTonnage!=null?this.grossWeightTonnage.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+32)
        {
            return this.vesselType!=null?this.vesselType:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+33)
        {
            return this.capacity!=null?this.capacity:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+34)
        {
            return this.capacityType!=null?this.capacityType:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+35)
        {
            return this.waterCapacity!=null?this.waterCapacity.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+36)
        {
            return this.waterCapacityType!=null?this.waterCapacityType:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+37)
        {
            return this.overAllLength!=null?this.overAllLength:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+38)
        {
            return this.overAllLengthMeasurement!=null?this.overAllLengthMeasurement:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+39)
        {
            return this.extremeBreadth!=null?this.extremeBreadth.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+40)
        {
            return this.extremeBreadthMeasurement!=null?this.extremeBreadthMeasurement:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+41)
        {
            return this.depthMoulded!=null?this.depthMoulded.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+42)
        {
            return this.depthMouldedMeasurement!=null?this.depthMouldedMeasurement:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+43)
        {
            return this.draughtLarger!=null?this.draughtLarger.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+44)
        {
            return this.draughtLargerMeasurement!=null?this.draughtLargerMeasurement:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+45)
        {
            return this.draughtSmaller!=null?this.draughtSmaller.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+46)
        {
            return this.draughtSmallerMeasurement!=null?this.draughtSmallerMeasurement:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+47)
        {
            return this.keel!=null?this.keel:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+48)
        {
            return this.keelMeasurement!=null?this.keelMeasurement:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+49;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = SicsCountryReference.class;
            info.name = "flaggedInCountry";
            info.namespace= "";
        }
        if(propertyIndex==count+1)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "typeTradeClassification";
            info.namespace= "";
        }
        if(propertyIndex==count+2)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "typeTrade";
            info.namespace= "";
        }
        if(propertyIndex==count+3)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "classificationSociety";
            info.namespace= "";
        }
        if(propertyIndex==count+4)
        {
            info.type = SicsBusinessPartnerReference.class;
            info.name = "manager";
            info.namespace= "";
        }
        if(propertyIndex==count+5)
        {
            info.type = SicsBusinessPartnerReference.class;
            info.name = "piClub";
            info.namespace= "";
        }
        if(propertyIndex==count+6)
        {
            info.type = PropertyInfo.LONG_CLASS;
            info.name = "numberOfCrew";
            info.namespace= "";
        }
        if(propertyIndex==count+7)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "ismSafetyMgntSystem";
            info.namespace= "";
        }
        if(propertyIndex==count+8)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "ismOrg";
            info.namespace= "";
        }
        if(propertyIndex==count+9)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "propulsionType";
            info.namespace= "";
        }
        if(propertyIndex==count+10)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "engineType";
            info.namespace= "";
        }
        if(propertyIndex==count+11)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "engineTypeDetail";
            info.namespace= "";
        }
        if(propertyIndex==count+12)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "mainEngineBuilt";
            info.namespace= "";
        }
        if(propertyIndex==count+13)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "engineManufacturer";
            info.namespace= "";
        }
        if(propertyIndex==count+14)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "rpm";
            info.namespace= "";
        }
        if(propertyIndex==count+15)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "power";
            info.namespace= "";
        }
        if(propertyIndex==count+16)
        {
            info.type = PropertyInfo.LONG_CLASS;
            info.name = "fuelCapacity";
            info.namespace= "";
        }
        if(propertyIndex==count+17)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "fuelCapacityType";
            info.namespace= "";
        }
        if(propertyIndex==count+18)
        {
            info.type = PropertyInfo.LONG_CLASS;
            info.name = "numberOfEngines";
            info.namespace= "";
        }
        if(propertyIndex==count+19)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "speed";
            info.namespace= "";
        }
        if(propertyIndex==count+20)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "speedMeasurement";
            info.namespace= "";
        }
        if(propertyIndex==count+21)
        {
            info.type = PropertyInfo.LONG_CLASS;
            info.name = "numberOfMasts";
            info.namespace= "";
        }
        if(propertyIndex==count+22)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "construction";
            info.namespace= "";
        }
        if(propertyIndex==count+23)
        {
            info.type = SicsCountryReference.class;
            info.name = "countryBuilt";
            info.namespace= "";
        }
        if(propertyIndex==count+24)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "yearBuilt";
            info.namespace= "";
        }
        if(propertyIndex==count+25)
        {
            info.type = SicsBusinessPartnerReference.class;
            info.name = "shipYard";
            info.namespace= "";
        }
        if(propertyIndex==count+26)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "rebuildingYear";
            info.namespace= "";
        }
        if(propertyIndex==count+27)
        {
            info.type = SicsBusinessPartnerReference.class;
            info.name = "rebuildingManufacturer";
            info.namespace= "";
        }
        if(propertyIndex==count+28)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "technicalNote";
            info.namespace= "";
        }
        if(propertyIndex==count+29)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "deadWeightTonnage";
            info.namespace= "";
        }
        if(propertyIndex==count+30)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "netWeightTonnage";
            info.namespace= "";
        }
        if(propertyIndex==count+31)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "grossWeightTonnage";
            info.namespace= "";
        }
        if(propertyIndex==count+32)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "vesselType";
            info.namespace= "";
        }
        if(propertyIndex==count+33)
        {
            info.type = PropertyInfo.LONG_CLASS;
            info.name = "capacity";
            info.namespace= "";
        }
        if(propertyIndex==count+34)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "capacityType";
            info.namespace= "";
        }
        if(propertyIndex==count+35)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "waterCapacity";
            info.namespace= "";
        }
        if(propertyIndex==count+36)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "waterCapacityType";
            info.namespace= "";
        }
        if(propertyIndex==count+37)
        {
            info.type = PropertyInfo.LONG_CLASS;
            info.name = "overAllLength";
            info.namespace= "";
        }
        if(propertyIndex==count+38)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "overAllLengthMeasurement";
            info.namespace= "";
        }
        if(propertyIndex==count+39)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "extremeBreadth";
            info.namespace= "";
        }
        if(propertyIndex==count+40)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "extremeBreadthMeasurement";
            info.namespace= "";
        }
        if(propertyIndex==count+41)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "depthMoulded";
            info.namespace= "";
        }
        if(propertyIndex==count+42)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "depthMouldedMeasurement";
            info.namespace= "";
        }
        if(propertyIndex==count+43)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "draughtLarger";
            info.namespace= "";
        }
        if(propertyIndex==count+44)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "draughtLargerMeasurement";
            info.namespace= "";
        }
        if(propertyIndex==count+45)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "draughtSmaller";
            info.namespace= "";
        }
        if(propertyIndex==count+46)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "draughtSmallerMeasurement";
            info.namespace= "";
        }
        if(propertyIndex==count+47)
        {
            info.type = PropertyInfo.LONG_CLASS;
            info.name = "keel";
            info.namespace= "";
        }
        if(propertyIndex==count+48)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "keelMeasurement";
            info.namespace= "";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

