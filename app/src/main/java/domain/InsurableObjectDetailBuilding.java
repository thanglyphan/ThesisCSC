package domain;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.1.8
//
// Created by Quasar Development at 29/01/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class InsurableObjectDetailBuilding extends InsurableObjectDetailBuildingOrGoods implements KvmSerializable,java.io.Serializable
{

    
	/**
	* SubclassNumber: 534. SicsRefInsurableObjectOccupation
	*/
    public SicsReferenceDataReference occupation;
    
	/**
	* SubclassNumber: 535. SicsRefInsurableObjectClassification
	*                Classification
	*/
    public SicsReferenceDataReference classificationOfOccupation;
    
	/**
	* SubclassNumber: 98. SicsRefBuildingWall
	*/
    public SicsReferenceDataReference walls;
    
	/**
	* SubclassNumber: 99. SicsRefBuildingRoof
	*/
    public SicsReferenceDataReference roof;
    
	/**
	* SubclassNumber: 96. SicsRefSoilQuality
	*                Soil
	*/
    public SicsReferenceDataReference soilQuality;
    
	/**
	* SubclassNumber: 97. SicsRefBuildingFoundation
	*/
    public SicsReferenceDataReference foundation;
    
	/**
	* Height - Field
	*/
    public Long height;
    
	/**
	* SubclassNumber: 126. SicsRefBuildingHeightMeasurement
	*                Height - Drop down
	*/
    public SicsReferenceDataReference heightMeasurement;
    
	/**
	* Constr. Year
	*/
    public Integer constructionYear;
    
	/**
	* Notes tab
	*/
    public String technicalNote;

    public InsurableObjectDetailBuilding ()
    {
    }

    public InsurableObjectDetailBuilding (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                java.lang.Object obj = info.getValue(); 
                if (info.name.equals("occupation"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.occupation = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("classificationOfOccupation"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.classificationOfOccupation = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("walls"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.walls = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("roof"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.roof = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("soilQuality"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.soilQuality = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("foundation"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.foundation = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("height"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.height = new Long(j.toString());
                            }
                        }
                        else if (obj instanceof Long){
                            this.height = (Long)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("heightMeasurement"))
                {
                    if(obj!=null)
                    {
                        java.lang.Object j = obj;
                        this.heightMeasurement = (SicsReferenceDataReference)__envelope.get(j,SicsReferenceDataReference.class,false);
                    }
                    continue;
                }
                if (info.name.equals("constructionYear"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.constructionYear = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.constructionYear = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("technicalNote"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.technicalNote = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.technicalNote = (String)obj;
                        }
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.occupation!=null?this.occupation:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.classificationOfOccupation!=null?this.classificationOfOccupation:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return this.walls!=null?this.walls:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+3)
        {
            return this.roof!=null?this.roof:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+4)
        {
            return this.soilQuality!=null?this.soilQuality:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+5)
        {
            return this.foundation!=null?this.foundation:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return this.height!=null?this.height:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+7)
        {
            return this.heightMeasurement!=null?this.heightMeasurement:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+8)
        {
            return this.constructionYear!=null?this.constructionYear:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+9)
        {
            return this.technicalNote!=null?this.technicalNote:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+10;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "occupation";
            info.namespace= "";
        }
        if(propertyIndex==count+1)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "classificationOfOccupation";
            info.namespace= "";
        }
        if(propertyIndex==count+2)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "walls";
            info.namespace= "";
        }
        if(propertyIndex==count+3)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "roof";
            info.namespace= "";
        }
        if(propertyIndex==count+4)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "soilQuality";
            info.namespace= "";
        }
        if(propertyIndex==count+5)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "foundation";
            info.namespace= "";
        }
        if(propertyIndex==count+6)
        {
            info.type = PropertyInfo.LONG_CLASS;
            info.name = "height";
            info.namespace= "";
        }
        if(propertyIndex==count+7)
        {
            info.type = SicsReferenceDataReference.class;
            info.name = "heightMeasurement";
            info.namespace= "";
        }
        if(propertyIndex==count+8)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "constructionYear";
            info.namespace= "";
        }
        if(propertyIndex==count+9)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "technicalNote";
            info.namespace= "";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

